using HexUN.App;
using UnityEngine;

namespace HexUN.Behaviour
{
    /// <summary>
    /// Implementation of Singleton for MonBehavious that insures only a single instance
    /// of the Monobehaviour exists in the scene, and that instance is not destroyed
    /// between scene loads
    /// </summary>
    /// <typeparam name="T">The type of the subclass.</typeparam>
    public abstract class ANGHexPersistent<T> : AQuitter where T : ANGHexPersistent<T>
    {
        private static T _instance;

        private static bool _instantiating = false;

        /// <summary>
        /// Singleton instance
        /// </summary>
        public static T Instance
        {
            get
            {
#if !UNITY_EDITOR
                if (AppQuitting)
                {
                    Debug.LogWarning($"No {nameof(ANGHexPersistent<T>)} returned because application is quiting");
                    return null;
                }
#endif
                TryCreateSingleton(_instance, ref _instance);
                return _instance;
            }
        }

        protected override void HexAwake() => TryCreateSingleton((T)this, ref _instance);

        /// <summary>
        /// <para>Tries to create a singleton. Succeeds if no instance has yet been created. Destroys any calling object that isn't the instance</para>
        /// </summary>
        /// <param name="caller">The instance calling the function</param>
        /// <param name="instanceVar">A reference to the variable which holds the instance</param>
        /// <returns>false if trying to create new instance</returns>
        public static bool TryCreateSingleton(T caller, ref T instanceVar)
        {
            if (Application.isPlaying)
            {
                // if no instance created, can create
                if (instanceVar == null)
                {
                    // block used to catch other threads creating singleton
                    if (_instantiating)
                    {
                        //Debug.LogWarning("Attempting to instantiate singleton, but _instantiation attempts indicate another thread is instantiating");
                        return false;
                    }
                    _instantiating = true;

                    // Check if there is a gameobject in the scene using the monobehaviour.
                    // If not make one
                    instanceVar = FindObjectOfType<T>();
                    if (instanceVar == null)
                    {
                        instanceVar = new GameObject(typeof(T).Name + "(AutoGenerated)").AddComponent<T>();
                    }

                    // Mark Singleton not to be destroyed between scenes. DontDestroyOnLoad only works for root level objects
                    if (instanceVar.transform.parent != null) instanceVar.transform.SetParent(null);
                    DontDestroyOnLoad(instanceVar.gameObject);

                    return true;
                }
                else if (caller != instanceVar)
                {
                    Destroy(caller);
                    return false;
                }
                return true;
            }

            /*
             * In Editor when not playing, need to surpress some of the above behaviour
             */
#if UNITY_EDITOR
            // if no instance created, can create
            if (instanceVar == null)
            {
                // Check if there is a gameobject in the scene using the monobehaviour.
                // If not make one
                instanceVar = FindObjectOfType<T>();
                if (instanceVar == null)
                {
                    instanceVar = new GameObject(typeof(T).Name + "(AutoGenerated)").AddComponent<T>();
                    instanceVar.hideFlags = HideFlags.DontSave & HideFlags.NotEditable & HideFlags.DontSaveInEditor;
                }
                return true;
            }
            else if (caller != instanceVar)
            {
                Debug.LogError($"{caller.name} is a {nameof(ANGHexPersistent<T>)}, but atleast one other exists in the scene: {instanceVar.name}");
                return false;
            }
            return true;
#endif

            return true;
        }
    }


}