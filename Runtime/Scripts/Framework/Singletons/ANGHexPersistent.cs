using HexUN.App;

using UnityEditor;

using UnityEngine;

namespace HexUN.Behaviour
{
    /// <summary>
    /// Implementation of Singleton for MonBehavious that insures only a single instance
    /// of the Monobehaviour exists in the scene, and that instance is not destroyed
    /// between scene loads
    /// </summary>
    /// <typeparam name="TSingleton">The type of the subclass.</typeparam>
    /// <typeparam name="TInterface">The interface type the class represents</typeparam>
    public abstract class ANgHexPersistent<TSingleton, TInterface> : AQuitter 
        where TSingleton : ANgHexPersistent<TSingleton, TInterface>, TInterface
        where TInterface : class
    {
        private static TInterface _instance;

        private static bool _instantiating = false;

        /// <summary>
        /// Singleton instance
        /// </summary>
        public static TInterface Instance
        {
            get
            {
#if !UNITY_EDITOR
                if (AppQuitting)
                {
                    Debug.LogWarning($"No {nameof(ANGHexPersistent<T>)} returned because application is quiting");
                    return null;
                }
#endif
                TryCreateSingleton(_instance, ref _instance);
                return _instance;
            }
        }

        protected override void HexAwake() => TryCreateSingleton((TSingleton)this, ref _instance);

        /// <summary>
        /// <para>Tries to create a singleton. Succeeds if no instance has yet been created. Destroys any calling object that isn't the instance</para>
        /// </summary>
        /// <param name="caller">The instance calling the function</param>
        /// <param name="instanceVar">A reference to the variable which holds the instance</param>
        /// <returns>false if trying to create new instance</returns>
        public static bool TryCreateSingleton(TInterface caller, ref TInterface instanceVar)
        {
            /*
             * When the application is playing, the required behaviour is to spawn the singleton object in the scene and 
             * deal with it's destroy properties. This is safe, because when the game stops playing the scene is reset.
             */
            if (Application.isPlaying)
            {
                // if no instance created, can create
                if (instanceVar == null)
                {
                    // block used to catch other threads creating singleton
                    if (_instantiating)
                    {
                        //Debug.LogWarning("Attempting to instantiate singleton, but _instantiation attempts indicate another thread is instantiating");
                        return false;
                    }
                    _instantiating = true;

                    // Check if there is a gameobject in the scene using the monobehaviour.
                    // If not make one
                    instanceVar = FindObjectOfType<TSingleton>();
                    if (instanceVar == null)
                    {
                        instanceVar = new GameObject(typeof(TSingleton).Name + "(AutoGenerated)").AddComponent<TSingleton>();
                    }

                    TSingleton castedInstance = instanceVar as TSingleton;

                    // Mark Singleton not to be destroyed between scenes. DontDestroyOnLoad only works for root level objects
                    if (castedInstance.transform.parent != null) castedInstance.transform.SetParent(null);
                    DontDestroyOnLoad(castedInstance.gameObject);

                    return true;
                }
                else if (caller != instanceVar)
                {
                    Destroy(caller as Object);
                    return false;
                }
                return true;
            }

            /*
             * In Editor when not playing, we don't want to be placing objects in the scene so we need another method to get the funcitonality. Below searches for a scriptable object that houses singleton behaviour for editor
             */
#if UNITY_EDITOR

            string typeName = typeof(TSingleton).Name;
            string searchClass = null;

            if (typeName.Contains("Ng"))
            {
                searchClass = typeName.Replace("Ng", "So");
            }

            if (searchClass != null)
            {
                string[] assets = AssetDatabase.FindAssets($"t:{searchClass}");

                if (assets.Length == 0)
                {
                    Debug.LogWarning($"[{nameof(ANgHexPersistent<TSingleton, TInterface>)}] Unable to find assets of type {searchClass}");
                }

                string config = assets[0];

                Object obj = AssetDatabase.LoadAssetAtPath(AssetDatabase.GUIDToAssetPath(config), typeof(Object));
                instanceVar = obj as TInterface;

                if (instanceVar == null)
                {
                    Debug.LogWarning($"[{nameof(ANgHexPersistent<TSingleton, TInterface>)}] Failed to case {AssetDatabase.GUIDToAssetPath(config)} as {typeof(TInterface).Name}");
                }
            }
            else
            {
                Debug.LogWarning($"[{nameof(ANgHexPersistent<TSingleton, TInterface>)}] Unable to convert asset name {typeName} into So (ScriptableObject) form. All Ng Singletons that need to be used at editor name should have an So equivalent that implements to interface.");
            }

            return true;
#endif

            return false;
        }
    }


}