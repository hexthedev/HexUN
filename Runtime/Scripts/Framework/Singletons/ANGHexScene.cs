using HexUN.App;
using UnityEngine;

namespace HexUN.MonoB
{
    /// <summary>
    /// Implementation of Singleton for MonBehavious that insures only a single instance
    /// of the Monobehaviour exists in the scene. The instance lives with the scene, and is destroyed when the scene
    /// is unloaded
    /// </summary>
    /// <typeparam name="T">The type of the subclass.</typeparam>
    public abstract class ANGHexScene<T> : AQuitter where T : ANGHexScene<T>
    {
        private static T _instance;

        private static bool _instantiating = false;

        /// <summary>
        /// Singleton instance
        /// </summary>
        public static T Instance
        {
            get
            {
                if (AppQuitting)
                {
                    Debug.LogWarning($"No {nameof(ANGHexScene<T>)} returned because application is quiting");
                    return null;
                }
                TryCreateSingleton(_instance, ref _instance);
                return _instance;
            }
        }

        protected override void MonoAwake() => TryCreateSingleton((T)this, ref _instance);

        /// <summary>
        /// <para>Tries to create a singleton. Succeeds if no instance has yet been created. Destroys any calling object that isn't the instance</para>
        /// </summary>
        /// <param name="caller">The instance calling the function</param>
        /// <param name="instanceVar">A reference to the variable which holds the instance</param>
        /// <returns>false if trying to create new instance</returns>
        public static bool TryCreateSingleton(T caller, ref T instanceVar)
        {
            // if no instance created, can create
            if (instanceVar == null)
            {
                // block used to catch other threads creating singleton
                if (_instantiating)
                {
                    //Debug.LogWarning("Attempting to instantiate singleton, but _instantiation attempts indicate another thread is instantiating");
                    return false;
                }
                _instantiating = true;

                // Check if there is a gameobject in the scene using the monobehaviour.
                // If not make one
                instanceVar = FindObjectOfType<T>();
                if (instanceVar == null)
                {
                    instanceVar = new GameObject(typeof(T).Name + "(AutoGenerated)").AddComponent<T>();
                }

                return true;
            }
            else if (caller != instanceVar)
            {
                Destroy(caller);
                return false;
            }
            return true;
        }

        /// <summary>
        /// When Destroying the instance, set the static instance var to null
        /// </summary>
        protected override void OnDestroy()
        {
            if (_instance == this) _instance = null;
        }
    }
}