using HexUN.App;

#if UNITY_EDITOR
using UnityEditor;
#endif

using UnityEngine;

namespace HexUN.Framework
{
    public static class UTOneHex
    {
        /// <summary>
        /// <para>Tries to create a singleton. Succeeds if no instance has yet been created. Destroys any calling object that isn't the instance.</para>
        /// </summary>
        /// <param name="caller">The instance calling the function</param>
        /// <param name="instanceVar">A reference to the variable which holds the instance</param>
        /// <param name="instantiatingFlag">A reference to a flag that indicates this singleton is instantiating. Protects against multi thread problems</param>
        /// <returns>false if trying to create new instance</returns>
        public static bool TryCreateSingleton<TSingleton>(TSingleton caller, ref TSingleton instanceVar, ref bool instantiatingFlag)
            where TSingleton : AQuitter
        {
            /*
             * When the application is playing, the required behaviour is to spawn the singleton object in the scene and 
             * deal with it's destroy properties. This is safe, because when the game stops playing the scene is reset.
             */
            if (Application.isPlaying)
            {
                // if no instance created, can create
                if (instanceVar == null)
                {
                    // block used to catch other threads creating singleton
                    if (instantiatingFlag)
                    {
                        //Debug.LogWarning("Attempting to instantiate singleton, but _instantiation attempts indicate another thread is instantiating");
                        return false;
                    }
                    instantiatingFlag = true;

                    // Check if there is a gameobject in the scene using the monobehaviour.
                    // If not make one
                    instanceVar = Object.FindObjectOfType<TSingleton>();
                    if (instanceVar == null)
                    {
                        instanceVar = new GameObject(typeof(TSingleton).Name + "(AutoGenerated)").AddComponent<TSingleton>();
                    }

                    // Mark Singleton not to be destroyed between scenes. DontDestroyOnLoad only works for root level objects
                    if (instanceVar.transform.parent != null) instanceVar.transform.SetParent(null);
                    return true;
                }
                else if (caller != instanceVar)
                {
                    Object.Destroy(caller as Object);
                    return false;
                }
                return true;
            }

#if !UNITY_EDITOR
            return false;
#endif
            /*
             * In Editor when not playing, we don't want to save singletons to the scene if they are used at
             * editor time. If the singleton is not present, it will be added to the scene but not saved.
             * This assumes that a prefab has been made with the same name as the singletone type
             */
#if UNITY_EDITOR
            string typeName = typeof(TSingleton).Name;
            string[] assets = AssetDatabase.FindAssets($"{typeName}");

            if (assets.Length == 0)
            {
                Debug.LogWarning($"[{typeof(TSingleton).Name}] Unable to find prefab with name {typeName}");
                return false;
            }

            string config = assets[0]; // take the first choice. Maybe needs more handeling

            GameObject obj = AssetDatabase.LoadAssetAtPath(AssetDatabase.GUIDToAssetPath(config), typeof(GameObject)) as GameObject;

            if (obj == null)
            {
                Debug.LogWarning($"[{nameof(TSingleton)}] Failed to cast {AssetDatabase.GUIDToAssetPath(config)} as GameObject. This means {typeName}.asset is not a prefab when it should be");
                return false;
            }

            instanceVar = obj.GetComponent<TSingleton>();

            if (instanceVar == null)
            {
                Debug.LogWarning($"[{nameof(TSingleton)}] Failed to get component {typeof(TSingleton).Name} from {typeName}.asset");
                return false;
            }

            return true;
#endif
        }
    }
}